{"version":3,"sources":["component/VisualTools/Chart/KMCurve.js"],"names":["Component","getRandomIntInclusive","min","max","Math","ceil","floor","random","isUndefined","d","undefined","toLowerCase","KMCurve","props","self","React","createRef","maxTime","Number","NEGATIVE_INFINITY","state","margin","top","right","bottom","left","loading","error","filter","data","transform","field","value","fields","event_value","eventValue","censored_value","censoredValue","group","time","event","collapsed_stage","map","groups","d3","nest","key","entries","rs","forEach","g","risk","values","length","sortKeys","a","b","rollup","v","censor","p","points","e","c","push","censored","nextProps","nextState","viewer","color","line","curve","curveStepAfter","x","xScale","y","yScale","append","datum","attr","style","point","drawLine","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","scaleLinear","domain","range","scaleOrdinal","quantize","t","interpolateSpectral","call","axisBottom","ticks","text","unit","axisLeft","drawKMCurve","lg","selectAll","enter","i","offset","getBBox","nodeWidth","id"],"mappings":"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","file":"KMCurve.711f9082.js","sourceRoot":"../source","sourcesContent":["import React, { Component } from 'react'\nimport {isEquivalent} from '../../../common/utils.js'\nimport * as d3 from \"d3\";\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \n}\nfunction isUndefined(d){\n    return d==undefined||d==null||(typeof d === 'string' && d.toLowerCase()==`na`)\n}\nexport default class KMCurve extends Component {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.maxTime = Number.NEGATIVE_INFINITY;\n        this.state = {\n            margin: {top: 35, right: 20, bottom: 45, left: 45},\n            loading:true,\n            error:null\n        }\n        if(this.props.filter) {\n            this.state.data = this.transform(this.props.data.filter(d=>d[this.props.filter.field]==this.props.filter.value), this.props.fields);\n        }else{\n            this.state.data = this.transform(this.props.data, this.props.fields);\n        }\n    }\n    transform(data,field){\n        const event_value = field.eventValue;\n        const censored_value = field.censoredValue;\n        const group =  field.group.field;\n        const time = field.time.field;\n        const event = field.event.field;\n        \n        \n        data = data.filter(d=>d.collapsed_stage!='stage_x/NR'&&!isUndefined(d[time])&&!isUndefined(d[event])&&!isUndefined(d[group]))\n        this.maxTime = Math.max(...data.map(d=>d[time]));\n        const groups = d3.nest().key(d=>d[group]).entries(data)\n        const rs = []\n        groups.forEach(g=>{\n            const key = g.key;\n            let risk = g.values.length;\n            const values = d3.nest()\n            .key(d=> +d[time])\n            .sortKeys((a,b)=>(+a)-(+b))\n            .rollup(function(v) {\n                return {\n                    event:v.filter(d=>d[event]==event_value).length,\n                    censor:v.filter(d=>d[event]==censored_value).length\n                };\n            })\n            .entries(g.values);\n            let p = 1;\n            const points = [];\n            values.forEach(d=>{\n                const time = +d.key;\n                const e = d.value.event;\n                const c = d.value.censor;\n                if(time<0) return;\n                if(e > 0){\n                    p *= (1 - e/risk)\n                    const censored = false;\n                    points.push({p, time, censored})\n                }\n                if(c > 0){\n                    const censored = true;\n                    points.push({p, time, censored})\n                }\n                risk -= (e + c);\n            })\n            rs.push({key,points})\n            \n        })\n        \n        return rs;\n        \n    }    \n    shouldComponentUpdate ( nextProps, nextState ) {\n        // TODO LIST\n        //console.log(nextProps.filters, this.props.filters)\n        // const flag = isEquivalent(nextProps.filters, this.props.filters);\n        // console.log(flag)\n        return true;\n    }\n    drawLine(viewer, points, color){\n        const line = d3.line()\n        .curve(d3.curveStepAfter)\n        .x(d=> this.xScale(d.time))\n        .y(d=> this.yScale(d.p));       \n        viewer.append(\"path\")\n            .datum(points)\n            .attr(\"class\", \"line\")\n            .style(\"stroke\", color)\n            .attr(\"d\", line);\n        \n        \n        points.forEach(point=>{\n            if(point.censored){\n                const p = [{\n                    p:point.p-0.015,\n                    time:point.time,\n                },{\n                    p:point.p+0.015,\n                    time:point.time,\n                }] \n                viewer.append(\"path\")\n                .datum(p)\n                .attr(\"class\", \"mark\")\n                .style(\"stroke\", color)\n                .attr(\"d\", line);\n            }\n        })\n        \n        \n    }\n\n    drawCensoredMark(viewer , point, color){\n\n    }\n\n    drawKMCurve(viewer, d) {\n        \n        // draw lines\n        this.drawLine(viewer, d.points, this.color(d.key))\n        // draw marks\n    }\n\n    componentDidUpdate() {\n\n    }\n    componentDidMount() {\n        const rect = this.self.current.getBoundingClientRect();\n        const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n        const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n        // create svg \n        const svg = d3.select(this.self.current)\n        .append(\"svg\")\n            .attr(\"width\", rect.width)\n            .attr(\"height\", rect.height)\n        // create viewer\n        const viewer = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n        //\n        this.xScale = d3.scaleLinear()\n        .domain([0, this.maxTime])\n        .range([0, innerWidth])\n        \n        this.yScale = d3.scaleLinear()\n        .domain([0, 1])\n        .range([innerHeight, 0])\n\n        this.color = d3.scaleOrdinal()\n        .domain(this.state.data.map(d => d.key))\n        .range(d3.quantize(t => d3.interpolateSpectral(t), this.state.data.length))\n        \n        \n\n\n        const xaxisGroup = viewer.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(d3.axisBottom(this.xScale).ticks(4)); //.tickSize(-innerWidth));\n        xaxisGroup.append('text')\n        .attr('y', 30)\n        .attr('x', innerWidth/2)\n        .attr('fill','black')\n        .attr('font-size',13)\n        .text(`Time ${this.props.fields.time.unit?`(${this.props.fields.time.unit})`:''}`)\n        \n        // add the y Axis\n        const yaxisGroup = viewer.append(\"g\")\n            .call(d3.axisLeft(this.yScale).ticks(4)); // .tickSize(-innerWidth)\n            yaxisGroup.append('text')\n            .attr('y', -30)\n            .attr('x', -innerHeight/3)\n            .attr('fill','black')\n            .attr('font-size',13)\n            .attr(\"transform\", \"rotate(-90)\")\n            .text(`Survival Probability`)\n\n        this.state.data.forEach(d=>this.drawKMCurve(viewer,d))\n\n\n        const height = 0;\n        const width = 15;\n        var nodeWidth = (d) => d.getBBox().width;\n        const legend = svg.append('g')\n          .attr('class', 'legend')\n          .attr('transform', `translate(${this.state.margin.left+innerWidth/2},0)`);\n\n        const lg = legend.selectAll('g')\n          .data(this.state.data)\n          .enter()\n        .append('g')\n          .attr('transform', (d,i) => `translate(${i * 100},${height + 15})`);\n\n        lg.append('rect')\n          .style('fill', d => this.color(d.key))\n          .attr('x', 0)\n          .attr('y', 0)\n          .attr('width', 10)\n          .attr('height', 10);\n\n        lg.append('text')\n          .style('font-family', 'Georgia')\n          .style('font-size', '13px')\n          .attr('x', 17.5)\n          .attr('y', 10)\n          .text(d => d.key);\n\n        let offset = 0;\n        lg.attr('transform', function(d, i) {\n            let x = offset;\n            offset += nodeWidth(this) + 10;\n            return `translate(${x},${height + 10})`;\n        });        \n    }\n    \n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n    }\n}\n"]}