{"version":3,"sources":["component/VisualTools/Chart/BarChart.js"],"names":["Component","BarChart","props","self","React","createRef","state","margin","top","right","bottom","left","loading","error","fields","x","y","data","transform","horizontal","field","new_data","d3","nest","key","d","sortKeys","ascending","rollup","v","length","entries","f","width","xScale","scaleBand","domain","map","range","padding","height","yScale","scaleLinear","max","nextProps","nextState","console","log","selection","className","update_bars","selectAll","enter_bars","enter","append","attr","bind","bandwidth","innerHeight","on","i","selected","value","filter","id","title","operation","values","filterAdded","text","merge","transition","duration","exit","remove","filters","filterData","filterbars","drawBar","viewer","rect","current","getBoundingClientRect","innerWidth","svg","select","createXScale","createYScale","xAxis","axisBottom","call","wrap","yAxis","axisLeft","tickSize","bars","each","word","words","split","reverse","line","lineNumber","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength"],"mappings":"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","file":"BarChart.f6e4f614.js","sourceRoot":"../source","sourcesContent":["import React, { Component } from 'react'\nimport {isEquivalent} from '../../../common/utils.js'\nimport * as d3 from \"d3\";\n\nexport default class BarChart extends Component {\n    constructor(props) {\n        super(props);\n        this.self = React.createRef();\n        this.state = {\n            margin: {top: 10, right: 10, bottom: 35, left: 35},\n            loading:true,\n            error:null,\n            fields:{x:'key',y:'value'}\n        }\n        this.state.data = this.transform(this.props.data, this.props.fields.x);\n        this.state.horizontal = true;\n    }\n    transform(data,field){\n        const new_data =  d3.nest()\n            .key(function(d) { return d[field]; })\n            .sortKeys(d3.ascending)\n            .rollup(function(v) { return v.length; })\n            .entries(data);\n        return new_data;\n        \n    }\n\n    createXScale(f,width) {\n        // set the ranges\n        const xScale = d3.scaleBand()\n            .domain(this.state.data.map(function(d) { return d[f]; }))\n            .range([0, width])\n            .padding(0.1);\n\n        // xScale.invert = function(x) {\n        //     var domain = this.domain();\n        //     var range = this.range()\n        //     var scale = d3.scaleQuantize().domain(range).range(domain)\n        //     return scale(x)\n        // }\n        return xScale;\n    }\n\n    createYScale(f, height) {\n        const yScale = d3.scaleLinear()\n        .domain([0, d3.max(this.state.data, function(d) { return d[f]; })])\n        .range([height, 0]);\n        return yScale;\n    }\n    shouldComponentUpdate ( nextProps, nextState ) {\n        // TODO LIST\n        console.log('bar shouldComponentUpdate')\n        //console.log(nextProps.filters, this.props.filters)\n        // const flag = isEquivalent(nextProps.filters, this.props.filters);\n        // console.log(flag)\n        return true;\n    }\n\n    drawBar(selection, data, className='og') {\n        const update_bars = selection.selectAll(`rect.${className}`).data(data,d=> d[this.state.fields.x])\n        \n        const enter_bars = update_bars.enter().append('rect')\n        enter_bars.attr('class', `${className}`)\n            .attr(\"x\", function(d) { return this.xScale(d[this.state.fields.x])}.bind(this))\n            .attr(\"width\", this.xScale.bandwidth())\n            .attr(\"y\",this.innerHeight)\n            //console.log(enter_bars)\n            enter_bars.on('click', (data,i) =>{\n                //enter_bars.attr('opacity',0.2)\n                const selected = enter_bars.filter(function(d){\n                  return d === data\n                })\n                //selected.attr('opacity',1)\n                const value = selected.data()[0].key\n                const filter = {\n                    id:this.props.id,\n                    title:this.props.title,\n                    field:this.props.fields.x,\n                    operation:'eq',\n                    values:value\n                }\n                this.props.filterAdded([filter])\n            })\n\n        enter_bars.append('title').text(d=> `${d.key}:${d.value}`)   \n        \n        update_bars.merge(enter_bars)\n            .transition().duration(1000)\n            .attr(\"y\", function(d) { return this.yScale(d[this.state.fields.y])}.bind(this))\n            .attr(\"height\", function(d) { return this.innerHeight - this.yScale(d[this.state.fields.y]); }.bind(this))\n        \n        // update_bars\n        \n        update_bars.exit()\n            .transition().duration(1000)\n            .attr('y',this.innerHeight)\n            .attr('height',0).remove()\n        \n        return update_bars;\n\n    }\n\n    componentDidUpdate() {\n        console.log('bar update',this.props)\n        let data = [];\n        if(this.props.filters.length > 0){\n            data = this.transform(this.props.filterData, this.props.fields.x)\n        }else{\n            data = this.transform(this.props.data, this.props.fields.x)\n        }\n        this.filterbars= this.drawBar(this.viewer,data,'ft');\n    }\n    componentDidMount() {\n\n        console.log('bar',this.props)\n        const rect = this.self.current.getBoundingClientRect();\n        this.innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n        this.innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n        // create svg \n        const svg = d3.select(this.self.current)\n        .append(\"svg\")\n            .attr(\"width\", rect.width)\n            .attr(\"height\", rect.height)\n        // create viewer\n        this.viewer = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.state.margin.left + \",\" + this.state.margin.top + \")\");\n        //\n        this.xScale = this.createXScale(this.state.fields.x, this.innerWidth);\n        this.yScale = this.createYScale(this.state.fields.y, this.innerHeight);\n\n        this.xAxis = d3.axisBottom(this.xScale)\n        //.tickSize(this.innerWidth)\n        this.viewer.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0,${this.innerHeight})`)\n        .call(this.xAxis)\n        .selectAll(\".tick text\")\n        .call(this.wrap, this.xScale.bandwidth());\n  \n        // add the y Axis\n        this.yAxis = d3.axisLeft(this.yScale)\n        .tickSize(-this.innerWidth)\n        this.viewer.append(\"g\")\n            .call(this.yAxis);\n\n\n        this.bars = this.drawBar(this.viewer, this.state.data,'og')\n        this.filterbars = this.drawBar(this.viewer, this.state.data,'ft')\n        //this.filterbars = this.drawBar(this.viewer, this.state.data,'ft')\n        // this.bars = this.viewer.selectAll(\".bar\").data(this.state.data)\n        // .enter().append(\"rect\")\n        // .attr(\"class\", \"bar\")\n        // .attr('fill','steelblue')\n        // .attr(\"x\", function(d) { return this.xScale(d[this.state.fields.x])}.bind(this))\n        // .attr(\"width\", this.xScale.bandwidth())\n        // .attr(\"y\", function(d) { return this.yScale(d[this.state.fields.y])}.bind(this))\n        // .attr(\"height\", function(d) { return this.innerHeight - this.yScale(d[this.state.fields.y]); }.bind(this))\n        // .on('click', (data,i) =>{\n        //     this.bars.attr('opacity',0.2)\n        //     const selected = this.bars.filter(function(d){\n        //       return d === data\n        //     })\n        //     selected.attr('opacity',1)\n        //     const value = selected.data()[0].key\n        //     const filter = {\n        //         id:this.props.id,\n        //         field:this.props.fields.x,\n        //         operation:'eq',\n        //         values:value\n        //     }\n        //     this.props.filterAdded([filter])\n        // })\n        // this.bars.append('title').text(d=> `${d.key}:${d.value}`)\n\n\n\n\n        \n    }\n    wrap(text, width) {\n        text.each(function() {\n          var text = d3.select(this),\n              words = text.text().split(/\\s+/).reverse(),\n              word,\n              line = [],\n              lineNumber = 0,\n              lineHeight = 1.1, // ems\n              y = text.attr(\"y\"),\n              dy = parseFloat(text.attr(\"dy\")),\n              tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n          while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n          }\n        });\n    }\n    render() {\n        return (\n            <div\n              id={this.props.id}\n              ref={this.self}\n              style={{ width: \"100%\", height: \"100%\" }}\n            ></div>\n        );\n      }\n}\n"]}